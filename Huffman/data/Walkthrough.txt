public void compress(BitInputStream in, BitOutputStream out)

1. count characters in file
	while in.readBits != -1
		array[in.readBits]++
		
	in.reset()
		
2. create Huffman tree
	for i = 0 to 255
		if array[i]!-0
			add new HuffNode to a priority queue
			
	add psuedo-EDF node
	
	while pq.size > 1
		poll two smallest nodes
		combine them into a new HuffNode
		add the new HuffNode into priority queue

3. Traverse tree and extract codes

	public void extractCodes(HuffNode current, String path)
		if current is leaf
			array[current.value] = path
			return
			
		extractCodes(current.left, path + 0)
		extractCodes(current.right, path + 1)

4. write the header

	public void writeHeader(HuffNode current, String path)
		if current is leaf
			out.writeBits(1,1)
			out.writeBits(9, current.value)
			return
		
		out.writeBits(1, 0)
		writeHeader(current.left, out)
		writeHeader(current.right, out)

5. compress/write the body

	while in.readBits != -1
		code = array[in.readBits]
		out.writeBits(length of code, Integer.parseInt(code,2))
		

6. write the pseudo-EDF
	same thing but with pseudo-EDF instead of in.readBit


public void decompress(BitInputStream in, BitOutputStream out)

1. check for HUFF_NUMBER
	if first 32 bits aren't HUFF_NUMBER
		throw new HuffException
		
2. recreate tree from header
	private HUffNode readHeadr(BitInputStream in)
		if in.readBits == 0
			left = readHeader(in)
			right = readHeadr(in)
			return new combined HuffNode
		else
			return a new HuffNode with in.readBits(9) as value
			
3. parse body of compressed file
	current HuffNode = root
	while in.readBits != -1
		if in.readBits == 1
			current = current.right
		else
			current = current.left
			
		if current is a leaf node
			if current.value == pseudo-EDF
				return
			else
				out.writeBits(8, current.value)
				current = root
	throw new HuffException